{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Santander Product Recommendation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "pd.options.display.max_columns = 60\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.metrics import classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split as split\n",
    "from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.datasets import load_iris\n",
    "import seaborn as sns\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import warnings\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "warnings.filterwarnings('ignore')\n",
    "import xgboost as xgb\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import LinearSVC\n",
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "from sklearn.metrics import confusion_matrix \n",
    "from sklearn.metrics import accuracy_score \n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn import preprocessing\n",
    "from sklearn.ensemble import RandomForestClassifier, VotingClassifier, BaggingClassifier, \\\n",
    "    AdaBoostClassifier, GradientBoostingClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"NewBank.csv\",nrows=500000)\n",
    "#df.set_index('ncodpers',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data = pd.get_dummies(df,prefix=['segmento'], columns = ['segmento'], drop_first=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fixing the data:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create dummies features:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "col_list=['ind_empleado','segmento','sexo','tiprel_1mes','indresi','indext','indfall']\n",
    "for col in col_list:\n",
    "     df = pd.get_dummies(df,prefix=None, columns = [col], drop_first=True) \n",
    "df = pd.get_dummies(df, columns = ['ind_actividad_cliente'], drop_first=True)   \n",
    "df.rename(columns={'ind_actividad_cliente_1.0': 'ind_actividad_cliente'}, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Drop unuseful columns and fillna the binary products columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df.drop(['ind_ctju_fin_ult1','ult_fec_cli_1t','conyuemp','tipodom','indrel_1mes',\\\n",
    "         'pais_residencia','fecha_alta','canal_entrada','cod_prov','fecha_dato','ncodpers'],inplace=True,axis=1)\n",
    "\n",
    "#here i inpute zero because it wasn't a lot of Nan:\n",
    "df.ind_nomina_ult1.fillna(0,inplace=True)\n",
    "df.ind_nom_pens_ult1.fillna(0,inplace=True)\n",
    "df.ind_nom_pens_ult1.fillna(0,inplace=True)\n",
    "df.antiguedad.fillna(0,inplace=True)\n",
    "df=df[df['antiguedad']>0] #because i found weird values like -9999"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Changing data type for some columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df['ind_nomina_ult1']=df['ind_nomina_ult1'].astype(np.int64)\n",
    "df['ind_nom_pens_ult1']=df['ind_nom_pens_ult1'].astype(np.int64)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# General EDA:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>age</th>\n",
       "      <th>ind_nuevo</th>\n",
       "      <th>antiguedad</th>\n",
       "      <th>indrel</th>\n",
       "      <th>renta</th>\n",
       "      <th>ind_ahor_fin_ult1</th>\n",
       "      <th>ind_aval_fin_ult1</th>\n",
       "      <th>ind_cco_fin_ult1</th>\n",
       "      <th>ind_cder_fin_ult1</th>\n",
       "      <th>ind_cno_fin_ult1</th>\n",
       "      <th>ind_ctma_fin_ult1</th>\n",
       "      <th>ind_ctop_fin_ult1</th>\n",
       "      <th>ind_ctpp_fin_ult1</th>\n",
       "      <th>ind_deco_fin_ult1</th>\n",
       "      <th>ind_deme_fin_ult1</th>\n",
       "      <th>ind_dela_fin_ult1</th>\n",
       "      <th>ind_ecue_fin_ult1</th>\n",
       "      <th>ind_fond_fin_ult1</th>\n",
       "      <th>ind_hip_fin_ult1</th>\n",
       "      <th>ind_plan_fin_ult1</th>\n",
       "      <th>ind_pres_fin_ult1</th>\n",
       "      <th>ind_reca_fin_ult1</th>\n",
       "      <th>ind_tjcr_fin_ult1</th>\n",
       "      <th>ind_valo_fin_ult1</th>\n",
       "      <th>ind_viv_fin_ult1</th>\n",
       "      <th>ind_nomina_ult1</th>\n",
       "      <th>ind_nom_pens_ult1</th>\n",
       "      <th>ind_recibo_ult1</th>\n",
       "      <th>ind_empleado_B</th>\n",
       "      <th>ind_empleado_F</th>\n",
       "      <th>ind_empleado_N</th>\n",
       "      <th>ind_empleado_S</th>\n",
       "      <th>segmento_02 - PARTICULARES</th>\n",
       "      <th>segmento_03 - UNIVERSITARIO</th>\n",
       "      <th>sexo_V</th>\n",
       "      <th>tiprel_1mes_I</th>\n",
       "      <th>indresi_S</th>\n",
       "      <th>indext_S</th>\n",
       "      <th>indfall_S</th>\n",
       "      <th>ind_actividad_cliente</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>4.170480e+05</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.00000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "      <td>499993.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>249999.026308</td>\n",
       "      <td>38.598646</td>\n",
       "      <td>0.000112</td>\n",
       "      <td>78.344077</td>\n",
       "      <td>1.000392</td>\n",
       "      <td>1.321726e+05</td>\n",
       "      <td>0.000124</td>\n",
       "      <td>0.000030</td>\n",
       "      <td>0.808003</td>\n",
       "      <td>0.000392</td>\n",
       "      <td>0.092329</td>\n",
       "      <td>0.014588</td>\n",
       "      <td>0.151426</td>\n",
       "      <td>0.045283</td>\n",
       "      <td>0.001918</td>\n",
       "      <td>0.002154</td>\n",
       "      <td>0.052159</td>\n",
       "      <td>0.093829</td>\n",
       "      <td>0.022036</td>\n",
       "      <td>0.007278</td>\n",
       "      <td>0.012402</td>\n",
       "      <td>0.002744</td>\n",
       "      <td>0.054507</td>\n",
       "      <td>0.053741</td>\n",
       "      <td>0.031950</td>\n",
       "      <td>0.004688</td>\n",
       "      <td>0.061109</td>\n",
       "      <td>0.068101</td>\n",
       "      <td>0.150246</td>\n",
       "      <td>0.00038</td>\n",
       "      <td>0.000278</td>\n",
       "      <td>0.999080</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>0.511793</td>\n",
       "      <td>0.441012</td>\n",
       "      <td>0.539632</td>\n",
       "      <td>0.492287</td>\n",
       "      <td>0.994942</td>\n",
       "      <td>0.042495</td>\n",
       "      <td>0.002054</td>\n",
       "      <td>0.525835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>144337.613521</td>\n",
       "      <td>16.861572</td>\n",
       "      <td>0.010582</td>\n",
       "      <td>69.257616</td>\n",
       "      <td>0.196001</td>\n",
       "      <td>2.281477e+05</td>\n",
       "      <td>0.011135</td>\n",
       "      <td>0.005477</td>\n",
       "      <td>0.393871</td>\n",
       "      <td>0.019795</td>\n",
       "      <td>0.289491</td>\n",
       "      <td>0.119898</td>\n",
       "      <td>0.358464</td>\n",
       "      <td>0.207924</td>\n",
       "      <td>0.043753</td>\n",
       "      <td>0.046362</td>\n",
       "      <td>0.222347</td>\n",
       "      <td>0.291591</td>\n",
       "      <td>0.146802</td>\n",
       "      <td>0.085001</td>\n",
       "      <td>0.110672</td>\n",
       "      <td>0.052312</td>\n",
       "      <td>0.227015</td>\n",
       "      <td>0.225506</td>\n",
       "      <td>0.175868</td>\n",
       "      <td>0.068309</td>\n",
       "      <td>0.239530</td>\n",
       "      <td>0.251919</td>\n",
       "      <td>0.357313</td>\n",
       "      <td>0.01949</td>\n",
       "      <td>0.016671</td>\n",
       "      <td>0.030318</td>\n",
       "      <td>0.001414</td>\n",
       "      <td>0.499861</td>\n",
       "      <td>0.496509</td>\n",
       "      <td>0.498427</td>\n",
       "      <td>0.499941</td>\n",
       "      <td>0.070940</td>\n",
       "      <td>0.201715</td>\n",
       "      <td>0.045275</td>\n",
       "      <td>0.499333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.202730e+03</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>124999.000000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.772608e+04</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>250000.000000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.001770e+05</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>374998.000000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.537020e+05</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>499999.000000</td>\n",
       "      <td>116.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>246.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>2.889440e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Unnamed: 0            age      ind_nuevo     antiguedad  \\\n",
       "count  499993.000000  499993.000000  499993.000000  499993.000000   \n",
       "mean   249999.026308      38.598646       0.000112      78.344077   \n",
       "std    144337.613521      16.861572       0.010582      69.257616   \n",
       "min         0.000000       2.000000       0.000000       1.000000   \n",
       "25%    124999.000000      24.000000       0.000000      22.000000   \n",
       "50%    250000.000000      35.000000       0.000000      44.000000   \n",
       "75%    374998.000000      49.000000       0.000000     156.000000   \n",
       "max    499999.000000     116.000000       1.000000     246.000000   \n",
       "\n",
       "              indrel         renta  ind_ahor_fin_ult1  ind_aval_fin_ult1  \\\n",
       "count  499993.000000  4.170480e+05      499993.000000      499993.000000   \n",
       "mean        1.000392  1.321726e+05           0.000124           0.000030   \n",
       "std         0.196001  2.281477e+05           0.011135           0.005477   \n",
       "min         1.000000  1.202730e+03           0.000000           0.000000   \n",
       "25%         1.000000  6.772608e+04           0.000000           0.000000   \n",
       "50%         1.000000  1.001770e+05           0.000000           0.000000   \n",
       "75%         1.000000  1.537020e+05           0.000000           0.000000   \n",
       "max        99.000000  2.889440e+07           1.000000           1.000000   \n",
       "\n",
       "       ind_cco_fin_ult1  ind_cder_fin_ult1  ind_cno_fin_ult1  \\\n",
       "count     499993.000000      499993.000000     499993.000000   \n",
       "mean           0.808003           0.000392          0.092329   \n",
       "std            0.393871           0.019795          0.289491   \n",
       "min            0.000000           0.000000          0.000000   \n",
       "25%            1.000000           0.000000          0.000000   \n",
       "50%            1.000000           0.000000          0.000000   \n",
       "75%            1.000000           0.000000          0.000000   \n",
       "max            1.000000           1.000000          1.000000   \n",
       "\n",
       "       ind_ctma_fin_ult1  ind_ctop_fin_ult1  ind_ctpp_fin_ult1  \\\n",
       "count      499993.000000      499993.000000      499993.000000   \n",
       "mean            0.014588           0.151426           0.045283   \n",
       "std             0.119898           0.358464           0.207924   \n",
       "min             0.000000           0.000000           0.000000   \n",
       "25%             0.000000           0.000000           0.000000   \n",
       "50%             0.000000           0.000000           0.000000   \n",
       "75%             0.000000           0.000000           0.000000   \n",
       "max             1.000000           1.000000           1.000000   \n",
       "\n",
       "       ind_deco_fin_ult1  ind_deme_fin_ult1  ind_dela_fin_ult1  \\\n",
       "count      499993.000000      499993.000000      499993.000000   \n",
       "mean            0.001918           0.002154           0.052159   \n",
       "std             0.043753           0.046362           0.222347   \n",
       "min             0.000000           0.000000           0.000000   \n",
       "25%             0.000000           0.000000           0.000000   \n",
       "50%             0.000000           0.000000           0.000000   \n",
       "75%             0.000000           0.000000           0.000000   \n",
       "max             1.000000           1.000000           1.000000   \n",
       "\n",
       "       ind_ecue_fin_ult1  ind_fond_fin_ult1  ind_hip_fin_ult1  \\\n",
       "count      499993.000000      499993.000000     499993.000000   \n",
       "mean            0.093829           0.022036          0.007278   \n",
       "std             0.291591           0.146802          0.085001   \n",
       "min             0.000000           0.000000          0.000000   \n",
       "25%             0.000000           0.000000          0.000000   \n",
       "50%             0.000000           0.000000          0.000000   \n",
       "75%             0.000000           0.000000          0.000000   \n",
       "max             1.000000           1.000000          1.000000   \n",
       "\n",
       "       ind_plan_fin_ult1  ind_pres_fin_ult1  ind_reca_fin_ult1  \\\n",
       "count      499993.000000      499993.000000      499993.000000   \n",
       "mean            0.012402           0.002744           0.054507   \n",
       "std             0.110672           0.052312           0.227015   \n",
       "min             0.000000           0.000000           0.000000   \n",
       "25%             0.000000           0.000000           0.000000   \n",
       "50%             0.000000           0.000000           0.000000   \n",
       "75%             0.000000           0.000000           0.000000   \n",
       "max             1.000000           1.000000           1.000000   \n",
       "\n",
       "       ind_tjcr_fin_ult1  ind_valo_fin_ult1  ind_viv_fin_ult1  \\\n",
       "count      499993.000000      499993.000000     499993.000000   \n",
       "mean            0.053741           0.031950          0.004688   \n",
       "std             0.225506           0.175868          0.068309   \n",
       "min             0.000000           0.000000          0.000000   \n",
       "25%             0.000000           0.000000          0.000000   \n",
       "50%             0.000000           0.000000          0.000000   \n",
       "75%             0.000000           0.000000          0.000000   \n",
       "max             1.000000           1.000000          1.000000   \n",
       "\n",
       "       ind_nomina_ult1  ind_nom_pens_ult1  ind_recibo_ult1  ind_empleado_B  \\\n",
       "count    499993.000000      499993.000000    499993.000000    499993.00000   \n",
       "mean          0.061109           0.068101         0.150246         0.00038   \n",
       "std           0.239530           0.251919         0.357313         0.01949   \n",
       "min           0.000000           0.000000         0.000000         0.00000   \n",
       "25%           0.000000           0.000000         0.000000         0.00000   \n",
       "50%           0.000000           0.000000         0.000000         0.00000   \n",
       "75%           0.000000           0.000000         0.000000         0.00000   \n",
       "max           1.000000           1.000000         1.000000         1.00000   \n",
       "\n",
       "       ind_empleado_F  ind_empleado_N  ind_empleado_S  \\\n",
       "count   499993.000000   499993.000000   499993.000000   \n",
       "mean         0.000278        0.999080        0.000002   \n",
       "std          0.016671        0.030318        0.001414   \n",
       "min          0.000000        0.000000        0.000000   \n",
       "25%          0.000000        1.000000        0.000000   \n",
       "50%          0.000000        1.000000        0.000000   \n",
       "75%          0.000000        1.000000        0.000000   \n",
       "max          1.000000        1.000000        1.000000   \n",
       "\n",
       "       segmento_02 - PARTICULARES  segmento_03 - UNIVERSITARIO         sexo_V  \\\n",
       "count               499993.000000                499993.000000  499993.000000   \n",
       "mean                     0.511793                     0.441012       0.539632   \n",
       "std                      0.499861                     0.496509       0.498427   \n",
       "min                      0.000000                     0.000000       0.000000   \n",
       "25%                      0.000000                     0.000000       0.000000   \n",
       "50%                      1.000000                     0.000000       1.000000   \n",
       "75%                      1.000000                     1.000000       1.000000   \n",
       "max                      1.000000                     1.000000       1.000000   \n",
       "\n",
       "       tiprel_1mes_I      indresi_S       indext_S      indfall_S  \\\n",
       "count  499993.000000  499993.000000  499993.000000  499993.000000   \n",
       "mean        0.492287       0.994942       0.042495       0.002054   \n",
       "std         0.499941       0.070940       0.201715       0.045275   \n",
       "min         0.000000       0.000000       0.000000       0.000000   \n",
       "25%         0.000000       1.000000       0.000000       0.000000   \n",
       "50%         0.000000       1.000000       0.000000       0.000000   \n",
       "75%         1.000000       1.000000       0.000000       0.000000   \n",
       "max         1.000000       1.000000       1.000000       1.000000   \n",
       "\n",
       "       ind_actividad_cliente  \n",
       "count          499993.000000  \n",
       "mean                0.525835  \n",
       "std                 0.499333  \n",
       "min                 0.000000  \n",
       "25%                 0.000000  \n",
       "50%                 1.000000  \n",
       "75%                 1.000000  \n",
       "max                 1.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.977964\n",
       "1    0.022036\n",
       "Name: ind_fond_fin_ult1, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.ind_fond_fin_ult1.value_counts('normalize')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xb8c9c18>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "title='The data labels is significant unmblanced 2.25% '\n",
    "fig = plt.figure()\n",
    "fig.suptitle(title, fontsize=20)\n",
    "df.ind_fond_fin_ult1.value_counts('normalize').plot.bar(color='green',fontsize = 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nomprov</th>\n",
       "      <th>renta</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>CEUTA</td>\n",
       "      <td>207341.871967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>MADRID</td>\n",
       "      <td>182286.861447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>BALEARS, ILLES</td>\n",
       "      <td>167206.400749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>BARCELONA</td>\n",
       "      <td>165055.599787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>BIZKAIA</td>\n",
       "      <td>157724.190000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>MELILLA</td>\n",
       "      <td>149793.782055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>GIRONA</td>\n",
       "      <td>144255.834764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>MALAGA</td>\n",
       "      <td>121037.431448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>CANTABRIA</td>\n",
       "      <td>119247.226841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>SEVILLA</td>\n",
       "      <td>117217.201027</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           nomprov          renta\n",
       "15           CEUTA  207341.871967\n",
       "30          MADRID  182286.861447\n",
       "7   BALEARS, ILLES  167206.400749\n",
       "8        BARCELONA  165055.599787\n",
       "9          BIZKAIA  157724.190000\n",
       "32         MELILLA  149793.782055\n",
       "21          GIRONA  144255.834764\n",
       "31          MALAGA  121037.431448\n",
       "13       CANTABRIA  119247.226841\n",
       "43         SEVILLA  117217.201027"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('nomprov')['renta'].mean().reset_index().sort_values(by='renta',ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.crosstab(index=df['sexo_V'],values=df['ind_fond_fin_ult1'], columns=df['ind_fond_fin_ult1'],\n",
    "            aggfunc='count',normalize='index').plot.bar(title='funds by male and female',figsize=(9,5)).fontsize=15"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that in the man accounts compare to woman acounts holder there is more fonds product"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "fond_renta=df[(df.ind_actividad_cliente==1)|(df.ind_plan_fin_ult1==1)|(df.ind_valo_fin_ult1==1)|(df.ind_ecue_fin_ult1==1)|(df.ind_dela_fin_ult1==1)|(df.ind_fond_fin_ult1==1)].renta.mean()\n",
    "NoFond_renta=df[(df.ind_actividad_cliente==0)|(df.ind_plan_fin_ult1==0)|(df.ind_valo_fin_ult1==0)|(df.ind_ecue_fin_ult1==0)|(df.ind_dela_fin_ult1==0)|(df.ind_fond_fin_ult1==0)].renta.mean()\n",
    "\n",
    "df.loc[df.ind_fond_fin_ult1==0,'renta']=df.loc[df.ind_fond_fin_ult1==0,'renta'].fillna(NoFond_renta)\n",
    "df.loc[df.ind_fond_fin_ult1==1,'renta']=df.loc[df.ind_fond_fin_ult1==1,'renta'].fillna(fond_renta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['renta']=df['renta']/100\n",
    "df['renta']=df['renta'].astype(np.int64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xc1c0400>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 2)\n",
    "fig.suptitle('salary differences between woning funds and without',size=18)\n",
    "#plt.gca().set_title('no fund')\n",
    "df[df.ind_fond_fin_ult1==1].renta.hist(range=[0, 6000],ax=axes[0],color='#86bf91',figsize=(13,4)) \n",
    "df[df.ind_fond_fin_ult1==0].renta.hist(range=[0, 6000],ax=axes[1]) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that tha distribution in the population that have \"funds\" has higher renta..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0xc20d908>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 381.375x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot((df[df.renta<6000]), vars=['renta'], hue='ind_fond_fin_ult1',size=4,palette=\"husl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xc562f60>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 2)\n",
    "\n",
    "(df.reset_index().iloc[:,8:31]).loc[df.reset_index().iloc[:,8:31].ind_fond_fin_ult1==1].\\\n",
    "sum(axis=0).sort_values().head().plot(kind='bar',ax=axes[0],figsize=(13,4),title='Customer with funds')\n",
    "\n",
    "(df.reset_index().iloc[:,8:31]).loc[df.reset_index().iloc[:,8:31].ind_fond_fin_ult1==0].\\\n",
    "sum(axis=0).sort_values().head().plot(kind='bar',ax=axes[1],figsize=(13,4),title='Customer without funds')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we can see hear the top 5 products holding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find the top 10 correlated features:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xc32aa90>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.corr().loc[ 'ind_fond_fin_ult1' , : ].reset_index().sort_values('ind_fond_fin_ult1',ascending=False).head(10).iloc[1:11,:].plot.bar(title='top 10 correlated features',x='index', y='ind_fond_fin_ult1')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Heat map correlated features:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xc5d7518>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#sns.pairplot(ndf[['antiguedad','ind_fond_fin_ult1','age','renta']],hue='ind_fond_fin_ult1')\n",
    "fig, ax = plt.subplots(figsize=(8,5))  \n",
    "sns.heatmap(df[['antiguedad','ind_fond_fin_ult1','age','ind_actividad_cliente','ind_plan_fin_ult1','ind_valo_fin_ult1','ind_ecue_fin_ult1','ind_dela_fin_ult1']].corr(),linewidths=.5, annot = True, vmin=-1, vmax=1, center= 0,ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#df.renta.hist()\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Eda for the population that have funds:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_funds=df.loc[df.ind_fond_fin_ult1==1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see here top 10 product that customers with fund have:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xc645b00>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_funds.reset_index().iloc[:,8:31].drop('ind_fond_fin_ult1',axis=1)\\\n",
    ".sum().sort_values().head(5).plot.bar(title='top 5 products the own the customer with funds ')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Top 5 cities with most customers that have funds:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>ind_fond_fin_ult1</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nomprov</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>BALEARS, ILLES</th>\n",
       "      <td>1527.132217</td>\n",
       "      <td>1829.359551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BARCELONA</th>\n",
       "      <td>1602.057512</td>\n",
       "      <td>1772.043435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ALAVA</th>\n",
       "      <td>1321.000000</td>\n",
       "      <td>1412.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIZKAIA</th>\n",
       "      <td>1321.051990</td>\n",
       "      <td>1412.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ASTURIAS</th>\n",
       "      <td>1059.562639</td>\n",
       "      <td>1196.458564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ALMERIA</th>\n",
       "      <td>941.236477</td>\n",
       "      <td>1086.187500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ALICANTE</th>\n",
       "      <td>964.617537</td>\n",
       "      <td>1041.509434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ALBACETE</th>\n",
       "      <td>871.388901</td>\n",
       "      <td>1030.111111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AVILA</th>\n",
       "      <td>869.814644</td>\n",
       "      <td>957.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BADAJOZ</th>\n",
       "      <td>814.003800</td>\n",
       "      <td>952.111111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "ind_fond_fin_ult1            0            1\n",
       "nomprov                                    \n",
       "BALEARS, ILLES     1527.132217  1829.359551\n",
       "BARCELONA          1602.057512  1772.043435\n",
       "ALAVA              1321.000000  1412.000000\n",
       "BIZKAIA            1321.051990  1412.000000\n",
       "ASTURIAS           1059.562639  1196.458564\n",
       "ALMERIA             941.236477  1086.187500\n",
       "ALICANTE            964.617537  1041.509434\n",
       "ALBACETE            871.388901  1030.111111\n",
       "AVILA               869.814644   957.500000\n",
       "BADAJOZ             814.003800   952.111111"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.pivot_table(index='nomprov',columns='ind_fond_fin_ult1',values='renta',aggfunc='mean').head(10).sort_values(by=1,ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xc7c0828>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.pivot_table(index='nomprov',columns='ind_fond_fin_ult1',values='renta',aggfunc='mean').head(8).sort_values(by=1,ascending=False).plot.bar(title='Funds owning by province',rot=0,figsize=(12,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we can see in the bar plot the mean rents in every city with fonds and without fonds and we can see the big gap in balears"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "bins = [0,12,60,119,160,198,246]\n",
    "labels=[0,1,2,3,4,5]\n",
    "df_funds['bins_antiguedad'] = pd.cut(df_funds['antiguedad'], bins=bins, labels=labels, include_lowest=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xb9fcf60>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_funds.bins_antiguedad.value_counts(\"normalize\").plot.bar(title='Antigudad bins')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " we can see that Distribution of the antiguedad is quiet  balanced..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "bins = [0,20,25,30,40,50,67,85,117]\n",
    "labels=[0,1,2,3,4,5,6,7]\n",
    "df_funds['bins_age'] = pd.cut(df_funds['age'], bins=bins, labels=labels, include_lowest=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x1224 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "total = len(df_funds)\n",
    "plt.figure(figsize=(13,17))\n",
    "\n",
    "plt.subplot(311)\n",
    "g = sns.countplot(x=\"bins_age\", data=df_funds)\n",
    "g.set_title(\"Bins_age Distribution \", fontsize=20)\n",
    "g.set_ylabel(\"Count\",fontsize= 17)\n",
    "g.set_xlabel(\"Bins\", fontsize=17)\n",
    "sizes=[]\n",
    "for p in g.patches:\n",
    "    height = p.get_height()\n",
    "    sizes.append(height)\n",
    "    g.text(p.get_x()+p.get_width()/2.,\n",
    "            height + 3,\n",
    "            '{:1.2f}%'.format(height/total*100),\n",
    "            ha=\"center\", fontsize=14) \n",
    "g.set_ylim(0, max(sizes) * 1.15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "the Distribution in the age is telling us that most of the customers that have funds are in bin 3 and 4 which is 40-50 or 50-67"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xb94a4a8>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_funds.sexo_V.value_counts(\"normalize\").plot.bar(title='Owning funds by Gender')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocecsing the data:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spliting the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#i drop the categorial columns that i didnt succeed to to cast to numric:\n",
    "df.drop('nomprov', axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop('ind_fond_fin_ult1', axis=1)\n",
    "y=df['ind_fond_fin_ult1']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = \\\n",
    "    train_test_split(X, y, train_size=0.85)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create new features with the split data:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Create salary raise slope level measure \n",
    "2. Create \"saving\" ordinal level measure\n",
    "3. Create credit rank meausre\n",
    "4. all this new features can help us to predict the binary class..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imputation-Filling of missing values with the mean():"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "train=pd.concat([X_train,y_train],axis=1)\n",
    "\n",
    "fond_renta=train[(train.ind_actividad_cliente==1)|(train.ind_plan_fin_ult1==1)\\\n",
    "                 |(train.ind_valo_fin_ult1==1)|(train.ind_ecue_fin_ult1==1)|\\\n",
    "                 (train.ind_dela_fin_ult1==1)|(train.ind_fond_fin_ult1==1)].renta.mean()\n",
    "NoFond_renta=train[(train.ind_actividad_cliente==0)|(train.ind_plan_fin_ult1==0)\\\n",
    "                   |(train.ind_valo_fin_ult1==0)|(train.ind_ecue_fin_ult1==0)|\\\n",
    "                   (train.ind_dela_fin_ult1==0)|(train.ind_fond_fin_ult1==0)].renta.mean()\n",
    "\n",
    "train.loc[train.ind_fond_fin_ult1==0,'renta']=train.loc[train.ind_fond_fin_ult1==0,'renta'].fillna(NoFond_renta)\n",
    "train.loc[train.ind_fond_fin_ult1==1,'renta']=train.loc[train.ind_fond_fin_ult1==1,'renta'].fillna(fond_renta)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "test=pd.concat([X_test,y_test],axis=1)\n",
    "\n",
    "fond_renta=test[(test.ind_actividad_cliente==1)|(test.ind_plan_fin_ult1==1)|\\\n",
    "                (test.ind_valo_fin_ult1==1)|(test.ind_ecue_fin_ult1==1)|\\\n",
    "                (test.ind_dela_fin_ult1==1)|(test.ind_fond_fin_ult1==1)].renta.mean()\n",
    "NoFond_renta=test[(test.ind_actividad_cliente==0)|(test.ind_plan_fin_ult1==0)\\\n",
    "                  |(test.ind_valo_fin_ult1==0)\\\n",
    "        |(test.ind_ecue_fin_ult1==0)|(test.ind_dela_fin_ult1==0)|(test.ind_fond_fin_ult1==0)].renta.mean()\n",
    "\n",
    "test.loc[test.ind_fond_fin_ult1==0,'renta']=test.loc[test.ind_fond_fin_ult1==0,'renta'].fillna(NoFond_renta)\n",
    "test.loc[test.ind_fond_fin_ult1==1,'renta']=test.loc[test.ind_fond_fin_ult1==1,'renta'].fillna(fond_renta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train=train.drop('ind_fond_fin_ult1', axis=1)\n",
    "y_train=train['ind_fond_fin_ult1']\n",
    "#test:\n",
    "X_test=test.drop('ind_fond_fin_ult1', axis=1)\n",
    "y_test=test['ind_fond_fin_ult1']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Blancing the train dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_1=X_train[y_train==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "train_0=X_train[y_train==0].sample(n=5800,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Validation dataset:\n",
    "X_valid_r, X_valid_r, y_train_r, y_test_r = \\\n",
    "    train_test_split(X_test, y_test, train_size=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train=pd.concat([train_0,train_1],axis=0).sort_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train=y_train[y_train.index.isin(x_train.index)].sort_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# XgBoost:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "hidden": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "X = x_train\n",
    "y = y_train\n",
    "xgb_model = xgb.XGBClassifier(max_depth=5)\n",
    "xgb_model.fit(X, y)\n",
    "y_pred_train = xgb_model.predict(X)\n",
    "y_pred=xgb_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "hidden": true,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>57572</td>\n",
       "      <td>15749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44</td>\n",
       "      <td>1634</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       0      1\n",
       "0  57572  15749\n",
       "1     44   1634"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_true=y_test,y_pred=y_pred)\n",
    "pd.DataFrame(cm,\n",
    "             index=xgb_model.classes_,\n",
    "             columns=xgb_model.classes_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt \n",
    "import pandas as pd\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc=StandardScaler()\n",
    "x_train_knn=sc.fit_transform(x_train)\n",
    "X_test_knn=sc.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn = KNeighborsClassifier(n_neighbors=5)\n",
    "X = x_train_knn\n",
    "y = y_train\n",
    "knn.fit(X, y)\n",
    "y_train_pred = knn.predict(X)\n",
    "y_pred = knn.predict(X_test_knn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#param_grid = [{'n_neighbors': [ 3, 4,5,6,7,8]}]\n",
    "#gs = GridSearchCV(estimator=knn, param_grid=param_grid, cv=10)\n",
    "#gs.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(gs.best_params_ )\n",
    "#print(gs.best_estimator_)\n",
    "#print(gs.bes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Y_pred:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>56462</td>\n",
       "      <td>16859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>126</td>\n",
       "      <td>1552</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       0      1\n",
       "0  56462  16859\n",
       "1    126   1552"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = confusion_matrix(y_test, y_pred,labels=[0,1]) \n",
    "pd.DataFrame(results,index=[0,1],columns=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.77      0.87     73321\n",
      "           1       0.08      0.92      0.15      1678\n",
      "\n",
      "   micro avg       0.77      0.77      0.77     74999\n",
      "   macro avg       0.54      0.85      0.51     74999\n",
      "weighted avg       0.98      0.77      0.85     74999\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred, labels=[0,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "classifier = DecisionTreeClassifier(max_depth=3)\n",
    "classifier = classifier.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = classifier.predict(X_test)\n",
    "#y_pred_train = classifier.predict(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score: 0.6630755076734356\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "print('Accuracy Score:', metrics.accuracy_score(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Y_pred:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>48068</td>\n",
       "      <td>25253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16</td>\n",
       "      <td>1662</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       0      1\n",
       "0  48068  25253\n",
       "1     16   1662"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = confusion_matrix(y_test, y_pred,labels=[0,1]) \n",
    "pd.DataFrame(results,index=[0,1],columns=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.66      0.79     73321\n",
      "           1       0.06      0.99      0.12      1678\n",
      "\n",
      "   micro avg       0.66      0.66      0.66     74999\n",
      "   macro avg       0.53      0.82      0.45     74999\n",
      "weighted avg       0.98      0.66      0.78     74999\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred, labels=[0,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RandomForestClassifier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "clf = RandomForestClassifier(max_depth=3, random_state=0)   \n",
    "clf.fit(x_train,y_train)\n",
    "y_pred=clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Y_pred:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>51045</td>\n",
       "      <td>22276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37</td>\n",
       "      <td>1641</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       0      1\n",
       "0  51045  22276\n",
       "1     37   1641"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = confusion_matrix(y_test, y_pred,labels=[0,1]) \n",
    "pd.DataFrame(results,index=[0,1],columns=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.70      0.82     73321\n",
      "           1       0.07      0.98      0.13      1678\n",
      "\n",
      "   micro avg       0.70      0.70      0.70     74999\n",
      "   macro avg       0.53      0.84      0.47     74999\n",
      "weighted avg       0.98      0.70      0.81     74999\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred, labels=[0,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Grid search:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "       estimator=RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=3, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=None,\n",
       "            oob_score=False, random_state=0, verbose=0, warm_start=False),\n",
       "       fit_params=None, iid='warn', n_jobs=None,\n",
       "       param_grid=[{'max_depth': [1, 2, 3, 4, 5], 'min_samples_split': [2, 3, 4], 'criterion': ['gini', 'entropy']}],\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring=None, verbose=0)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "param_grid = [{'max_depth': [1, 2, 3, 4,5], 'min_samples_split': [2,3,4], 'criterion' : ['gini', 'entropy']},]\n",
    "gs = GridSearchCV(estimator=clf, param_grid=param_grid, cv=10)\n",
    "gs.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'criterion': 'entropy', 'max_depth': 4, 'min_samples_split': 4}\n",
      "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n",
      "            max_depth=4, max_features='auto', max_leaf_nodes=None,\n",
      "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "            min_samples_leaf=1, min_samples_split=4,\n",
      "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=None,\n",
      "            oob_score=False, random_state=0, verbose=0, warm_start=False)\n"
     ]
    }
   ],
   "source": [
    "print(gs.best_params_ )\n",
    "print(gs.best_estimator_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature_importances:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "importances = classifier.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xdd3d710>"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline          \n",
    "(pd.Series(classifier.feature_importances_, index=x_train.columns)\n",
    "   .nlargest(4)\n",
    "   .plot(kind='barh')) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic regression:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='warn',\n",
       "          n_jobs=None, penalty='l2', random_state=0, solver='warn',\n",
       "          tol=0.0001, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = LogisticRegression(random_state=0)\n",
    "clf.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=clf.predict(X_test)\n",
    "y_pred_train=clf.predict(x_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Y_pred:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2258</td>\n",
       "      <td>3542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1005</td>\n",
       "      <td>8335</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      0     1\n",
       "0  2258  3542\n",
       "1  1005  8335"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = confusion_matrix(y_train, y_pred_train,labels=[0,1]) \n",
    "pd.DataFrame(results,index=[0,1],columns=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.69      0.39      0.50      5800\n",
      "           1       0.70      0.89      0.79      9340\n",
      "\n",
      "   micro avg       0.70      0.70      0.70     15140\n",
      "   macro avg       0.70      0.64      0.64     15140\n",
      "weighted avg       0.70      0.70      0.68     15140\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_train, y_pred_train, labels=[0,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>28922</td>\n",
       "      <td>44399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>188</td>\n",
       "      <td>1490</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       0      1\n",
       "0  28922  44399\n",
       "1    188   1490"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = confusion_matrix(y_test, y_pred,labels=[0,1]) \n",
    "pd.DataFrame(results,index=[0,1],columns=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      0.39      0.56     73321\n",
      "           1       0.03      0.89      0.06      1678\n",
      "\n",
      "   micro avg       0.41      0.41      0.41     74999\n",
      "   macro avg       0.51      0.64      0.31     74999\n",
      "weighted avg       0.97      0.41      0.55     74999\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_test, y_pred, labels=[0,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final conclusion:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The conclusion from the classification_report we can see that our recall in class 1 is:62% what mean that most of the positive observations we correctly identify but we waste alot of resources because only 9% from our predications labeld as  positive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>28922</td>\n",
       "      <td>44399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>188</td>\n",
       "      <td>1490</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       0      1\n",
       "0  28922  44399\n",
       "1    188   1490"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_true=y_test,\n",
    "                      y_pred=y_pred)\n",
    "pd.DataFrame(cm,\n",
    "             index=xgb_model.classes_,\n",
    "             columns=xgb_model.classes_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt \n",
    "import pandas as pd\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "classifier = DecisionTreeClassifier(max_depth=3,criterion='gini',min_samples_split= 2,min_weight_fraction_leaf=0.0)\n",
    "classifier = classifier.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = classifier.predict(X_test)\n",
    "y_pred_train = classifier.predict(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy Score: 0.6629555060734144\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "print('Accuracy Score:', metrics.accuracy_score(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Y_pred:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "results = confusion_matrix(y_test, y_pred,labels=[0,1]) \n",
    "pd.DataFrame(results,index=[0,1],columns=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "print(classification_report(y_test, y_pred, labels=[0,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RandomForestClassifier:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "clf = RandomForestClassifier(max_depth=3, random_state=0)   \n",
    "clf.fit(x_train,y_train)\n",
    "y_pred=clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Y_pred:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = confusion_matrix(y_test, y_pred,labels=[0,1]) \n",
    "pd.DataFrame(results,index=[0,1],columns=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(classification_report(y_test, y_pred, labels=[0,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Grid search:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = [{'max_depth': [1, 2, 3, 4,5], 'min_samples_split': [2,3,4], 'criterion' : ['gini', 'entropy']},]\n",
    "gs = GridSearchCV(estimator=clf, param_grid=param_grid, cv=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "gs.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(gs.best_params_ )\n",
    "print(gs.best_estimator_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature_importances:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "importances = classifier.feature_importances_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline          \n",
    "(pd.Series(classifier.feature_importances_, index=x_train.columns)\n",
    "   .nlargest(4)\n",
    "   .plot(kind='barh')) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic regression:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = LogisticRegression(C=100,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "clf.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=clf.predict(X_test)\n",
    "y_pred_train=clf.predict(x_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Y_pred:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "results = confusion_matrix(y_train, y_pred_train,labels=[0,1]) \n",
    "pd.DataFrame(results,index=[0,1],columns=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_train, y_pred_train, labels=[0,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "results = confusion_matrix(y_test, y_pred,labels=[0,1]) \n",
    "pd.DataFrame(results,index=[0,1],columns=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_test, y_pred, labels=[0,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Results and conclusions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The conclusion from the classification_report we can see that our recall in class 1 is:62% what mean that most of the positive observations we correctly identify but we waste alot of resources because only 9% from our predications labeld as  positive."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "384px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "oldHeight": 266.222222,
   "position": {
    "height": "121.222px",
    "left": "1301px",
    "right": "20px",
    "top": "98px",
    "width": "350px"
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "varInspector_section_display": "none",
   "window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
